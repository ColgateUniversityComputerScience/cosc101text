Iteration
=========

In this chapter, we'll learn about a way to repeat (loop) over a set of
statements that is more general than the ``for`` loop we have already
encountered. First, a slight detour to learn a bit more about lists.

An introduction to lists
------------------------

Like a string, a **list** is a sequence of values. In a string, the
values are characters; in a list, they can be *any* type. The values in
a list are called **elements** or sometimes **items**.

There are several ways to create a new list; the simplest is to enclose
the comma-separated elements in square brackets (``[`` and ``]``):

::

    [10, 20, 30, 40]
    ['crunchy frog', 'ram bladder', 'lark vomit']

The first example is a list of four integers. The second is a list of
three strings. (Mmmm... crunchy frog.) The elements of a list don’t have
to be the same type. The following list contains a string, a float, an
integer, and (lo!) another list:

::

    ['spam', 2.0, 5, [10, 20]]

A list within another list is **nested**.

A list that contains no elements is called an empty list; you can create
one with empty brackets, ``[]``.

As you might expect, you can assign list values to variables:

::

    >>> cheeses = ['Cheddar', 'Edam', 'Gouda']
    >>> numbers = [17, 123]
    >>> empty = []
    >>> print cheeses, numbers, empty
    ['Cheddar', 'Edam', 'Gouda'] [17, 123] []

Lists are mutable
~~~~~~~~~~~~~~~~~

The syntax for accessing the elements of a list is the same as for
accessing the characters of a string---the bracket operator. The
expression inside the brackets specifies the index. Remember that the
indices start at 0:

::

    >>> print cheeses[0]
    Cheddar

Unlike strings, lists are *mutable*. When the bracket operator appears
on the left side of an assignment, it identifies the element of the list
that will be modified through assignment.

::

    >>> numbers = [17, 123]
    >>> numbers[1] = 5
    >>> print numbers
    [17, 5]

The one-eth element of ``numbers``, which used to be 123, is now 5.

You can think of a list as a relationship between indices and elements.
This relationship is called a **mapping**; each index “maps to” one of
the elements. Here is a state diagram showing ``cheeses``, ``numbers``
and ``empty``:

.. figure:: figs/list_state.png
   :align: center
   :alt: Using lists to make "mappings".

   Using lists to make "mappings".
Lists are represented by boxes with the word “list” outside and the
elements of the list inside. ``cheeses`` refers to a list with three
elements indexed 0, 1 and 2. ``numbers`` contains two elements; the
diagram shows that the value of the second element has been reassigned
from 123 to 5. ``empty`` refers to a list with no elements.

List indices work the same way as string indices:

-  Any integer expression can be used as an index.

-  If you try to read or write an element that does not exist, you get
   an ``IndexError``.

-  If an index has a negative value, it counts backward from the end of
   the list.

The ``in`` operator also works on lists.

::

    >>> cheeses = ['Cheddar', 'Edam', 'Gouda']
    >>> 'Edam' in cheeses
    True
    >>> 'Brie' in cheeses
    False

Traversing a list
~~~~~~~~~~~~~~~~~

The most common way to traverse the elements of a list is with a ``for``
loop. The syntax is the same as for strings:

::

    for cheese in cheeses:
        print cheese

This works well if you only need to read the elements of the list. But
if you want to write or update the elements, you need the indices. A
common way to do that is to combine the functions ``range`` and ``len``:

::

    for i in range(len(numbers)):
        numbers[i] = numbers[i] * 2

This loop traverses the list and updates each element. ``len`` returns
the number of elements in the list. ``range`` returns a list of indices
from 0 to :math:`n-1`, where :math:`n` is the length of the list. Each
time through the loop ``i`` gets the index of the next element. The
assignment statement in the body uses ``i`` to read the old value of the
element and to assign the new value.

A ``for`` loop over an empty list never executes the body:

::

    for x in []:
        print 'This never happens.'

Although a list can contain another list, the nested list still counts
as a single element. The length of this list is four:

::

    ['spam', 1, ['Brie', 'Roquefort', 'Pol le Veq'], [1, 2, 3]]

``range`` revisited
~~~~~~~~~~~~~~~~~~~

Earlier, we learned to use the ``range`` function to loop over the
indices of a string:

::

    # count the lower case e's in a string
    count = 0
    s = "that's cheesy"
    for index in range(len(s)):
        if s[index] == 'e':
            count += 1

We learned that ``range``, when given an integer parameter, will cause
the ``for`` loop iterator variable (``index``, above) to "take on" the
values 0, 1, 2, ... ``len(s)-1``.

Besides accepting one parameter, ``range`` can accept either 2 or 3
parameters, giving us more flexibility in how to generate a list of
numbers. When called with two parameters, ``range(i, j)`` returns the
list of integers ``[i, i+1, i+2, ..., j-1]``. When called with three
parameters, ``range(i, j, k)`` the third value represents a ``step`` to
increment or decrement by when creating the sequence. It is, by default,
1, but can be any integral value. Here are some examples with ``range``:

::

    >>> range(4)
    [0, 1, 2, 3]
    >>> range(1,4)
    [1, 2, 3]
    >>> range(0,4,2)
    [0, 2]
    >>> range(0,4,3)
    [0, 3]

List operations
~~~~~~~~~~~~~~~

The ``+`` operator concatenates lists, similar to string concatenation:

::

    >>> a = [1, 2, 3]
    >>> b = [4, 5, 6]
    >>> c = a + b
    >>> print c
    [1, 2, 3, 4, 5, 6]

In the same way, the ``*`` operator repeats a list a given number of
times:

::

    >>> [0] * 4
    [0, 0, 0, 0]
    >>> [1, 2, 3] * 3
    [1, 2, 3, 1, 2, 3, 1, 2, 3]

The first example repeats ``[0]`` four times. The second example repeats
the list ``[1, 2, 3]`` three times.

There are four useful built-in functions relevant to lists. We've
already seen ``len``, which returns the length of a sequence. There are
also ``min``, ``max``, and ``sum``, which return the minimum and maximum
values in a list, and the sum of a list of integers, respectively. For
example:

::

    >>> mylist = [1,3,6,42]
    >>> len(mylist)
    4
    >>> min(mylist)
    1
    >>> max(mylist)
    42
    >>> sum(mylist)
    52

The ``while`` statement
-----------------------

Computers are often used to automate repetitive tasks. Repeating
identical or similar tasks without making errors is something that
computers do well and people do poorly.

We have seen several programs that use the ``for`` statement to perform
repetition, which is also called **iteration**. Because iteration is so
common, Python provides several language features to make it easier. One
is, of course, the ``for`` statement, and another is the ``while``
statement.

Let's say we're obsessed with rockets blasting off to the moon, and that
we want a function that prints a "countdown" sequence. Here is how we
might do that with a ``while`` statement:

::

    def countdown(n):
        while n > 0:
            print n
            n = n-1
        print 'Blastoff!'

You can almost read the ``while`` statement as if it were English:

    "While ``n`` is greater than 0, display the value of ``n`` and then
    reduce the value of ``n`` by 1. When you get to 0, display the word
    ``Blastoff!``".

More formally, here is the flow of execution for a ``while`` statement:

1. Evaluate the condition, yielding ``True`` or ``False``.

2. If the condition is ``False``, exit the ``while`` statement and
   continue execution at the next statement.

3. If the condition is ``True``, execute the body and then go back to
   step 1 (thus making a **loop**).

The body of the loop should change the value of one or more variables so
that eventually the condition becomes ``False`` and the loop terminates.
Otherwise the loop will repeat forever, which is called an **infinite
loop**.

In the case of ``countdown``, we can prove that the loop terminates
because we know that the value of ``n`` is finite, and we can see that
the value of ``n`` gets smaller each time through the loop, so
eventually we have to get to 0. In other cases, it is not so easy to
tell:

::

    def sequence(n):
        while n != 1:
            print n,
            if n%2 == 0:        # n is even
                n = n/2
            else:               # n is odd
                n = n*3+1

The condition for this loop is ``n != 1``, so the loop will continue
until ``n`` is ``1``, which makes the condition false.

Each time through the loop, the program outputs the value of ``n`` and
then checks whether it is even or odd. If it is even, ``n`` is divided
by 2. If it is odd, the value of ``n`` is replaced with ``n*3+1``. For
example, if the argument passed to ``sequence`` is 3, the resulting
sequence is 3, 10, 5, 16, 8, 4, 2, 1.

Since ``n`` sometimes increases and sometimes decreases, there is no
obvious proof that ``n`` will ever reach 1, or that the program
terminates. For some particular values of ``n``, we can prove
termination. For example, if the starting value is a power of two, then
the value of ``n`` will be even each time through the loop until it
reaches 1. The previous example ends with such a sequence, starting with
16.

The hard question is whether we can prove that this program terminates
for *all positive values* of ``n``. So far [1]_, no one has been able to
prove it *or* disprove it!

``break``
---------

Sometimes you don't know whether to end a loop until you get half way
through the body. In that case you can use the ``break`` statement to
"jump" out of the loop.

For example, suppose you want to take input from the user until they
type ``done``. You could write:

::

    while True:
        line = raw_input('> ')
        if line == 'done':
            break
        print line

    print 'Done!'

The loop condition is ``True``, which is always true, so the loop runs
until it hits the break statement.

Each time through, it prompts the user with an angle bracket. If the
user types ``done``, the ``break`` statement exits the loop. Otherwise
the program echoes whatever the user types and goes back to the top of
the loop. Here’s a sample run:

::

    > not done
    not done
    > done
    Done!

This way of writing ``while`` loops is common because you can check the
condition anywhere in the loop (not just at the top) and you can express
the stop condition affirmatively ("stop when this happens") rather than
negatively ("keep going until that happens.").

Square roots
------------

Loops are often used in programs that compute numerical results by
starting with an approximate answer and iteratively improving it.

For example, one way of computing square roots is Newton’s method.
Suppose that you want to know the square root of :math:`a`. If you start
with almost any estimate, :math:`x`, you can compute a better estimate
with the following formula:

.. math:: y = \frac{x+\frac{a}{x}}{2}

 For example, if :math:`a` is 4 and :math:`x` is 3:

::

    >>> a = 4.0
    >>> x = 3.0
    >>> y = (x + a/x) / 2
    >>> print y
    2.16666666667

Which is closer to the correct answer (:math:`\sqrt{4} = 2`). If we
repeat the process with the new estimate, it gets even closer:

::

    >>> x = y
    >>> y = (x + a/x) / 2
    >>> print y
    2.00641025641

After a few more updates, the estimate is almost exact:

::

    >>> x = y
    >>> y = (x + a/x) / 2
    >>> print y
    2.00001024003
    >>> x = y
    >>> y = (x + a/x) / 2
    >>> print y
    2.00000000003

In general we don’t know ahead of time how many steps it will take to
get to the right answer, but we know when we get there because the
estimate stops changing:

::

    >>> x = y
    >>> y = (x + a/x) / 2
    >>> print y
    2.0
    >>> x = y
    >>> y = (x + a/x) / 2
    >>> print y
    2.0

When ``y == x``, we can stop. Here is a loop that starts with an initial
estimate, ``x``, and improves it until it stops changing:

::

    while True:
        print x
        y = (x + a/x) / 2
        if y == x:
            break
        x = y

For most values of ``a`` this works fine, but in general it is dangerous
to test ``float`` equality. Floating-point values are only approximately
right: most rational numbers, like :math:`1/3`, and irrational numbers,
like :math:`\sqrt{2}`, can’t be represented exactly with a ``float``.

Rather than checking whether ``x`` and ``y`` are exactly equal, it is
safer to use the built-in function ``abs`` to compute the absolute
value, or magnitude, of the difference between them:

::

        if abs(y-x) < epsilon:
            break

Where ``epsilon`` has a value like ``0.0000001`` that determines how
close is close enough.

    **Example**:

    1. Encapsulate this loop in a function called ``square_root`` that
       takes ``a`` as a parameter, chooses a reasonable value of ``x``,
       and returns an estimate of the square root of ``a``.

Algorithms
----------

Newton’s method is an example of an **algorithm**: it is a mechanical
process for solving a category of problems (in this case, computing
square roots).

It is not easy to define an algorithm. It might help to start with
something that is not an algorithm. When you learned to multiply
single-digit numbers, you probably memorized the multiplication table.
In effect, you memorized 100 specific solutions. That kind of knowledge
is not algorithmic.

But if you were "lazy," you probably cheated by learning a few tricks.
For example, to find the product of :math:`n` and 9, you can write
:math:`n-1` as the first digit and :math:`10-n` as the second digit.
This trick is a general solution for multiplying any single-digit number
by 9. That’s an algorithm!

Similarly, the techniques you learned for addition with carrying,
subtraction with borrowing, and long division are all algorithms. One of
the characteristics of algorithms is that they do not require any
intelligence to carry out. They are mechanical processes in which each
step follows from the last according to a simple set of rules.

.. raw:: html

   <!--
   In my opinion, it is embarrassing that humans spend so much time in
   school learning to execute algorithms that, quite literally, require no
   intelligence.
   -->

The process of designing algorithms is interesting, intellectually
challenging, and a central part of what we call *program design*. Some
of the things that people do naturally, without difficulty or conscious
thought, are the hardest to express algorithmically. Understanding
natural language is a good example. We all do it, but so far no one has
been able to explain *how* we do it, at least not in the form of an
algorithm.

Debugging
---------

As you start writing bigger programs, you might find yourself spending
more time debugging. More code means more chances to make an error and
more place for bugs to hide.

One way to cut your debugging time is "debugging by bisection". For
example, if there are 100 lines in your program and you check them one
at a time, it would take 100 steps.

Instead, try to break the problem in half. Look at the middle of the
program, or near it, for an intermediate value you can check. Add a
``print`` statement (or something else that has a verifiable effect) and
run the program.

If the mid-point check is incorrect, there must be a problem in the
first half of the program. If it is correct, the problem is in the
second half.

Every time you perform a check like this, you cut in half the number of
lines that have to be searched. After six steps (which is fewer than
100), you would be down to one or two lines of code, at least in theory.

In practice it is not always clear what the "middle of the program" is
and not always possible to check it. It doesn’t make sense to count
lines and find the exact midpoint. Instead, think about places in the
program where there might be errors and places where it is easy to put a
check. Then choose a spot where you think the chances are about the same
that the bug is before or after the check.

Glossary
--------

initialization:
    An assignment that gives an initial value to a variable that will be
    updated.

increment:
    An update that increases the value of a variable (often by one).

decrement:
    An update that decreases the value of a variable.

iteration:
    Repeated execution of a set of statements using either a recursive
    function call or a loop.

infinite loop:
    A loop in which the terminating condition is never satisfied.

Exercises
---------

    1. To test the square root algorithm in this chapter, you could
       compare it with ``math.sqrt``. Write a function named
       ``test_square_root`` that prints a table like this:

       +-------------+----------------------+--------------------+---------------------+
       | :math:`a`   | ``square_root(a)``   | ``math.sqrt(a)``   | difference          |
       +=============+======================+====================+=====================+
       | 1.0         | 1.0                  | 1.0                | 0.0                 |
       +-------------+----------------------+--------------------+---------------------+
       | 2.0         | 1.41421356237        | 1.41421356237      | 2.22044604925e-16   |
       +-------------+----------------------+--------------------+---------------------+
       | 3.0         | 1.73205080757        | 1.73205080757      | 0.0                 |
       +-------------+----------------------+--------------------+---------------------+
       | 4.0         | 2.0                  | 2.0                | 0.0                 |
       +-------------+----------------------+--------------------+---------------------+
       | 5.0         | 2.2360679775         | 2.2360679775       | 0.0                 |
       +-------------+----------------------+--------------------+---------------------+
       | 6.0         | 2.44948974278        | 2.44948974278      | 0.0                 |
       +-------------+----------------------+--------------------+---------------------+
       | 7.0         | 2.64575131106        | 2.64575131106      | 0.0                 |
       +-------------+----------------------+--------------------+---------------------+
       | 8.0         | 2.82842712475        | 2.82842712475      | 4.4408920985e-16    |
       +-------------+----------------------+--------------------+---------------------+
       | 9.0         | 3.0                  | 3.0                | 0.0                 |
       +-------------+----------------------+--------------------+---------------------+

       The first column is a number, :math:`a`; the second column is the
       square root of :math:`a` computed with the ``square_root``
       function; the third column is the square root computed by
       ``math.sqrt``; the fourth column is the absolute value of the
       difference between the two estimates.

    2. The built-in function ``eval`` takes a string and evaluates it
       using the Python interpreter. For example:

       ::

           >>> eval('1 + 2 * 3')
           7
           >>> import math
           >>> eval('math.sqrt(5)')
           2.2360679774997898
           >>> eval('type(math.pi)')
           <type 'float'>

       Write a function called ``eval_loop`` that iteratively prompts
       the user, takes the resulting input and evaluates it using
       ``eval``, and prints the result.

       It should continue until the user enters ``'done'``, and then
       return the value of the last expression it evaluated.

    3. The brilliant mathematician Srinivasa Ramanujan found an infinite
       series [2]_ that can be used to generate a numerical
       approximation of :math:`\pi`:

       .. math::

          \frac{1}{\pi} = \frac{2\sqrt{2}}{9801} 
           \sum^\infty_{k=0} \frac{(4k)!(1103+26390k)}{(k!)^4 396^{4k}}

       Write a function called ``estimate_pi`` that uses this formula to
       compute and return an estimate of :math:`\pi`. It should use a
       ``while`` loop to compute terms of the summation until the last
       term is smaller than ``1e-15`` (which is Python notation for
       :math:`10^{-15}`). You can check the result by comparing it to
       ``math.pi``.

.. [1]
   See http://wikipedia.org/wiki/Collatz_conjecture.

.. [2]
   See http://wikipedia.org/wiki/Pi
